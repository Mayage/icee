# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

ifeq ($(filter $(LOCAL_CPPFLAGS),-fPIC),)
    LOCAL_TARGETPREFIX          = _non-pic
    LOCAL_OBJPREFIX             = $(OBJPREFIX)/non-pic
    LOCAL_CPPFLAGS              := $(LOCAL_CPPFLAGS) -DICE_STATIC_LIBS
else
    LOCAL_TARGETPREFIX          = _pic
    LOCAL_OBJPREFIX             = $(OBJPREFIX)/pic
endif

ifneq ($(LOCAL_HEADERPATH),)
    LOCAL_SLICEOUTPUTDIR        = $(LOCAL_HEADERPATH)
    LOCAL_HEADERS               = $(wildcard ice/$(LOCAL_HEADERPATH)/*.h)
else
    LOCAL_SLICEOUTPUTDIR        = $(LOCAL_PATH)
endif

LOCAL_GEN_SRCS                  := $(addprefix $(LOCAL_PATH)/,$(notdir $(LOCAL_SLICES:.ice=.cpp)))
LOCAL_GEN_SRCS                  += $(addprefix $(LOCAL_PATH)/,$(notdir $(LOCAL_FREEZE_SRCS)))
LOCAL_GEN_HEADERS               := $(addprefix $(LOCAL_SLICEOUTPUTDIR)/,$(notdir $(LOCAL_SLICES:.ice=.h)))
LOCAL_GEN_HEADERS               += $(LOCAL_FREEZE_HEADERS)

ifneq ($(LOCAL_HEADERS),)
    LOCAL_HEADERS               := $(filter-out $(LOCAL_GEN_HEADERS),$(addprefix $(LOCAL_SLICEOUTPUTDIR)/,$(notdir $(LOCAL_HEADERS))))
endif

LOCAL_SRCS := $(filter-out $(addprefix $(LOCAL_SRCDIR)/,$(notdir $(LOCAL_SLICES:.ice=.cpp))), $(LOCAL_SRCS))

LOCAL_OBJS := $(LOCAL_OBJS) $(addprefix $(LOCAL_PATH)/$(LOCAL_OBJPREFIX)/,$(notdir $(LOCAL_SRCS:.cpp=.o))) \
	$(addprefix $(LOCAL_PATH)/$(LOCAL_OBJPREFIX)/,$(notdir $(LOCAL_GEN_SRCS:.cpp=.o)))

ifneq ($(LOCAL_C_SRCS),)
    LOCAL_OBJS                  := $(LOCAL_OBJS) $(addprefix $(LOCAL_PATH)/$(LOCAL_OBJPREFIX)/,$(notdir $(LOCAL_C_SRCS:.c=.o)))
endif

$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_MODULE := $(LOCAL_MODULE)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_OBJS := $(LOCAL_OBJS)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_GEN_SRCS := $(LOCAL_GEN_SRCS)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_OBJPREFIX := $(LOCAL_OBJPREFIX)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_TARGETPREFIX := $(LOCAL_TARGETPREFIX)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_HEADERS := $(LOCAL_HEADERS)
$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean: LOCAL_GEN_HEADERS := $(LOCAL_GEN_HEADERS)

$(LOCAL_OBJS): LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_OBJS): LOCAL_CFLAGS := $(LOCAL_CFLAGS)
$(LOCAL_OBJS): LOCAL_MODULE := $(LOCAL_MODULE)
$(LOCAL_OBJS): LOCAL_CPPFLAGS := $(LOCAL_CPPFLAGS)
$(LOCAL_OBJS): LOCAL_SRCDIR := $(LOCAL_SRCDIR)
$(LOCAL_OBJS): LOCAL_OBJPREFIX := $(LOCAL_OBJPREFIX)

$(LOCAL_GEN_HEADERS): LOCAL_MODULE := $(LOCAL_MODULE)
$(LOCAL_GEN_HEADERS): LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_GEN_HEADERS): LOCAL_SLICEDIR := $(LOCAL_SLICEDIR)
$(LOCAL_GEN_HEADERS): LOCAL_SLICE2CPPFLAGS := $(LOCAL_SLICE2CPPFLAGS)
$(LOCAL_GEN_HEADERS): LOCAL_SLICEOUTPUTDIR := $(LOCAL_SLICEOUTPUTDIR)

-include $(wildcard $(LOCAL_PATH).depend/*.d)
-include $(wildcard $(LOCAL_PATH)$(LOCAL_OBJPREFIX)/.depend/*.d)

$(LOCAL_SLICEOUTPUTDIR)/%.h:: $(LOCAL_SLICEDIR)/%.ice
	@mkdir -p $(@D)/.depend
	$(E) "Compiling $(<F) -> $(@F)"
	$(Q)LD_LIBRARY_PATH=$(ice_lib_dir):$$LD_LIBRARY_PATH $(SLICE2CPP) --output-dir $(@D) $(LOCAL_SLICE2CPPFLAGS) $(SLICE2CPPFLAGS) $<
ifneq ($(LOCAL_SLICEOUTPUTDIR),$(LOCAL_PATH))
	$(Q)mv $(@D)/$(basename $(@F)).cpp $(LOCAL_PATH)
endif
	@LD_LIBRARY_PATH=$(ice_lib_dir):$$LD_LIBRARY_PATH $(SLICE2CPP) --depend $(LOCAL_SLICE2CPPFLAGS) $(SLICE2CPPFLAGS) $< | sed 's|\(.*:\)|$(@D)/\1|' > $(@D)/.depend/$(*F).ice.d

$(LOCAL_PATH)/%.cpp: $(LOCAL_SLICEOUTPUTDIR)/%.h

cpp/%.h:: ice/cpp/%.h
	@mkdir -p $(@D)
	$(E) "Copying header $(@F)"
	$(Q)cp $< $(@)

$(LOCAL_PATH)/$(LOCAL_OBJPREFIX)/%.o: $(LOCAL_PATH)/%.cpp
	@mkdir -p $(@D)/.depend
	$(E) "Compiling $(<F) -> $(@F)"
	$(Q)$(CXX) $(CPPFLAGS) $(LOCAL_CPPFLAGS) -c $< -o $@
	@$(CXX) -DMAKEDEPEND -MM $(CPPFLAGS) $(LOCAL_CPPFLAGS) $< | sed 's|\(.*:\)|$(@D)/\1|' > $(@D)/.depend/$(*F).d

$(LOCAL_PATH)/$(LOCAL_OBJPREFIX)/%.o: $(LOCAL_SRCDIR)/%.cpp
	@mkdir -p $(@D)/.depend
	$(E) "Compiling $(<F) -> $(@F)"
	$(Q)$(CXX) $(CPPFLAGS) $(LOCAL_CPPFLAGS) -c $< -o $@
	@$(CXX) -DMAKEDEPEND -MM $(CPPFLAGS) $(LOCAL_CPPFLAGS) $< | sed 's|\(.*:\)|$(@D)/\1|' > $(@D)/.depend/$(*F).d

$(LOCAL_PATH)/$(LOCAL_OBJPREFIX)/%.o: $(LOCAL_SRCDIR)/%.c
	@mkdir -p $(@D)/.depend
	$(E) "Compiling $(<F) -> $(@F)"
	$(Q)$(CC) $(CFLAGS) $(LOCAL_CFLAGS) -c $< -o $@
	@$(CC) -DMAKEDEPEND -MM $(CFLAGS) $(LOCAL_CFLAGS) $< | sed 's|\(.*:\)|$(@D)/\1|' > $(@D)/.depend/$(*F).d

$(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean:
	$(E) "Cleaning $(LOCAL_MODULE)"
	$(Q)rm -rf $(LOCAL_PATH)/$(LOCAL_OBJPREFIX) $(LOCAL_GEN_SRCS) $(LOCAL_GEN_HEADERS) $(LOCAL_PATH)/.depend
ifneq ($(LOCAL_HEADERS),)
	$(Q)rm -rf $(LOCAL_HEADERS)
endif


ifneq ($(LOCAL_GEN_SRCS),)
$(LOCAL_MODULE)_gitignore: LOCAL_GEN_SRCS := $(LOCAL_GEN_SRCS)
$(LOCAL_MODULE)_gitignore: LOCAL_GEN_HEADERS := $(LOCAL_GEN_HEADERS)
$(LOCAL_MODULE)_gitignore: LOCAL_HEADERS := $(LOCAL_HEADERS)
$(LOCAL_MODULE)_gitignore::
	@for line in $(LOCAL_GEN_SRCS) $(LOCAL_GEN_HEADERS) $(LOCAL_HEADERS) ; do \
        echo $$line ; \
    done
gitignore:: $(LOCAL_MODULE)_gitignore
endif

ALL_OBJS                        := $(ALL_OBJS) $(LOCAL_OBJS)
ALL_GEN_HEADERS                 := $(ALL_GEN_HEADERS) $(LOCAL_GEN_HEADERS)
ALL_LOCAL_HEADERS               := $(ALL_LOCAL_HEADERS) $(LOCAL_HEADERS)

TARGETS                         := $(TARGETS) $(LOCAL_GEN_SRCS) $(LOCAL_OBJS)

CLEAN_TARGETS                   := $(CLEAN_TARGETS) $(LOCAL_MODULE)$(LOCAL_TARGETPREFIX)_clean
