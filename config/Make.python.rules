# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

LOCAL_GEN_SRCS                  := $(addprefix $(LOCAL_PATH)/$(LOCAL_PREFIX),$(notdir $(LOCAL_SLICES:.ice=_ice.py)))

ifneq ($(LOCAL_PREFIX),)
    LOCAL_SLICE2PYFLAGS         := $(LOCAL_SLICE2PYFLAGS) --prefix $(LOCAL_PREFIX)
endif

$(LOCAL_GEN_SRCS): LOCAL_PREFIX := $(LOCAL_PREFIX)
$(LOCAL_GEN_SRCS): LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_GEN_SRCS): LOCAL_SLICEDIR := $(LOCAL_SLICEDIR)
$(LOCAL_GEN_SRCS): LOCAL_SLICE2PYFLAGS := $(LOCAL_SLICE2PYFLAGS)

$(LOCAL_PATH)/$(LOCAL_PREFIX)%_ice.py: $(LOCAL_SLICEDIR)/%.ice
	@mkdir -p $(@D)/.depend
	$(E) "Compiling $(<F) -> $(@F)"
	$(Q)LD_LIBRARY_PATH=$(ice_lib_dir):$$LD_LIBRARY_PATH $(SLICE2PY) --output-dir $(@D) $(LOCAL_SLICE2PYFLAGS) $(SLICE2PYFLAGS) $<
	@LD_LIBRARY_PATH=$(ice_lib_dir):$$LD_LIBRARY_PATH $(SLICE2PY) --depend $(LOCAL_SLICE2PYFLAGS) $(SLICE2PYFLAGS) $< | sed 's|\(.*:\)|$(@D)/\1|' > $(@D)/.depend/$(*F).ice.d
	
TARGETS                         := $(TARGETS) $(LOCAL_GEN_SRCS)

ifneq ($(LOCAL_PACKAGE),)

$(LOCAL_PATH)/$(LOCAL_PACKAGE)/__init__.py: LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_PATH)/$(LOCAL_PACKAGE)/__init__.py: LOCAL_SLICES := $(LOCAL_SLICES)
$(LOCAL_PATH)/$(LOCAL_PACKAGE)/__init__.py: LOCAL_SLICE2PYFLAGS := $(LOCAL_SLICE2PYFLAGS)

$(LOCAL_PATH)/$(LOCAL_PACKAGE)/__init__.py: $(filter-out $(METRICS_SLICES), $(LOCAL_SLICES))
	$(E) "Generating $(LOCAL_PACKAGE) package index"
	$(Q)LD_LIBRARY_PATH=$(ice_lib_dir):$$LD_LIBRARY_PATH $(SLICE2PY) --output-dir $(LOCAL_PATH) --build-package \
		$(filter-out --no-package, $(LOCAL_SLICE2PYFLAGS)) $(SLICE2PYFLAGS) $(filter-out $(METRICS_SLICES), $(LOCAL_SLICES))

$(LOCAL_MODULE): LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_MODULE): LOCAL_PACKAGE := $(LOCAL_PACKAGE)
$(LOCAL_MODULE): $(LOCAL_PATH)/$(LOCAL_PACKAGE)/__init__.py
TARGETS                         := $(TARGETS) $(LOCAL_PATH)/$(LOCAL_PACKAGE)/__init__.py

$(LOCAL_MODULE)_gitignore: LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_MODULE)_gitignore: LOCAL_PACKAGE := $(LOCAL_PACKAGE)
$(LOCAL_MODULE)_gitignore::
	@echo $(LOCAL_PATH)/$(LOCAL_PACKAGE)/\*\*

gitignore:: $(LOCAL_MODULE)_gitignore

endif

$(LOCAL_MODULE): LOCAL_GEN_SRCS := $(LOCAL_GEN_SRCS)
$(LOCAL_MODULE): $(LOCAL_GEN_SRCS)

$(LOCAL_MODULE)_clean: LOCAL_MODULE := $(LOCAL_MODULE)
$(LOCAL_MODULE)_clean: LOCAL_GEN_SRCS := $(LOCAL_GEN_SRCS)
$(LOCAL_MODULE)_clean: LOCAL_PATH := $(LOCAL_PATH)
$(LOCAL_MODULE)_clean: LOCAL_PACKAGE := $(LOCAL_PACKAGE)
$(LOCAL_MODULE)_clean: LOCAL_PATH := $(LOCAL_PATH)

$(LOCAL_MODULE)_clean:
	$(E) "Cleaning $(LOCAL_MODULE)"
	$(Q)rm -rf $(LOCAL_GEN_SRCS) $(LOCAL_PATH)/.depend
ifneq ($(LOCAL_PACKAGE),)
	$(Q)rm -rf $(LOCAL_PATH)/$(LOCAL_PACKAGE)
endif

CLEAN_TARGETS                   := $(CLEAN_TARGETS) $(LOCAL_MODULE)_clean

ifneq ($(LOCAL_GEN_SRCS),)
$(LOCAL_MODULE)_gitignore: LOCAL_GEN_SRCS := $(LOCAL_GEN_SRCS)
$(LOCAL_MODULE)_gitignore::
	@for line in $(LOCAL_GEN_SRCS) ; do \
        echo $$line ; \
    done
gitignore:: $(LOCAL_MODULE)_gitignore
endif