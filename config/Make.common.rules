# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Check if ICEE_TARGET_OS is correctly defined.
#
ifeq ($(filter $(ICEE_TARGET_OS),debian yocto),)
    $(error Invalid ICEE_TARGET_OS: '$(ICEE_TARGET_OS)' supported values are: 'debian' and 'yocto'. See $(CURDIR)/Makefile).
endif

#
# Check if DEPLOY_TARGET is set when using test_deploy.
#
ifeq ($(filter $(MAKECMDGOALS),test_deploy),test_deploy)
    ifeq ($(DEPLOY_TARGET),)
        $(error You need to define DEPLOY_TARGET to use test_deploy. See $(CURDIR)/Makefile $(CURDIR)/Makefile)
    endif
endif

.PHONY: all clean

all::
clean::

VERSION                         = 3.6.3
SOVERSION                       = 36

ifeq ($(findstring Debian,$(shell uname -a)),Debian)
    ice_libprefix               = /$(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
else
    ifeq ($(shell uname -m),x86_64)
        ice_libprefix           = 64
    endif
endif
ice_libsubdir                   = lib$(ice_libprefix)

ifeq ($(USE_BIN_DIST),yes)
    ICE_HOME                    ?= /usr
    ICEE_HOME                   ?= /usr
endif

ice_slice_dir                   = ice/slice
ice_include_dir                 = cpp/include
ice_man_dir                     = ice/man/man1

ifeq ($(ICE_HOME),)
    ice_bin_dir                 = ice/cpp/bin
    ice_lib_dir                 = ice/cpp/$(ice_libsubdir)
else
    ice_bin_dir                 = $(ICE_HOME)/bin
    ice_lib_dir                 = $(ICE_HOME)/lib$(ice_libprefix)
endif

SLICE2CPP                       = $(ice_bin_dir)/slice2cpp
SLICE2FREEZE                    = $(ice_bin_dir)/slice2freeze
SLICE2CPPFLAGS                  = -I$(ice_slice_dir)
SLICE2PYFLAGS                   = -I$(ice_slice_dir)

ifeq ($(DEFAULT_MUTEX_PROTOCOL),PrioInherit)
    override CPPFLAGS           += -DICE_PRIO_INHERIT
endif

ifeq ($(filter $(MAKECMDGOALS),clean),)
    ifeq ($(wildcard $(SLICE2CPP)),)
        $(error You need to build Ice for C++ from ice/cpp directory or set ICE_HOME to use an Ice binary distribution)
    endif
endif

PYTHON_BASEVERSION              ?= 2.7
PYTHON_DIR                      ?= python$(PYTHON_BASEVERSION)

#
# Optimization flags
#
ifeq ($(ICEE_TARGET_OS),yocto)

    override CPPFLAGS           += $(CXXFLAGS)
    override LDFLAGS            := $(LDFLAGS)
else

ifeq ($(OPTIMIZE),yes)
    CFLAGS                      = -O2 -DNDEBUG -ffunction-sections -fdata-sections
    override CPPFLAGS           += -Os -DNDEBUG -ffunction-sections -fdata-sections
    override LDFLAGS            += -Wl,--gc-sections
else
    CFLAGS                      = -g
    override CPPFLAGS           := $(CPPFLAGS) -g
endif

endif

ifeq ($(EMBEDDED_RUNPATH),yes)
    ifneq ($(EMBEDDED_RUNPATH_PREFIX),)
        RPATH_DIR = $(EMBEDDED_RUNPATH_PREFIX)
    endif

    #
    # Unless new_dtags is set to yes we use old style dtags, to add a RPATH
    # entry instead of RUNPATH entry, this allow the plug-ins to load without
    # need to set LD_LIBRARY_PATH
    #
    ifeq ($(new_dtags),yes)
        DTAGS                   = -Wl,--enable-new-dtags
    else
        DTAGS                   = -Wl,--disable-new-dtags
    endif
    DTAGS                       := $(DTAGS)
endif

#
# Enable C++11 features
#
ifeq ($(CPP11), yes)
    override CPPFLAGS           += -std=c++11
    CPP11PREFIX                 = -cpp11
    LIBNAME_SUFFIX		= ++11
endif

#
# Include the OS specific rules
#
include config/Make.$(ICEE_TARGET_OS).rules

ifneq ($(USE_BIN_DIST),yes)
    icee_bin_dir                = cpp/bin
    icee_lib_dir                = cpp/lib/$(LIBPREFIX)
else
    icee_lib_dir                = $(ICEE_HOME)/$(icee_libsubdir)
endif

CFLAGS                          += -O -w
override CPPFLAGS               := -Wall -Werror -pthread -I$(ice_include_dir) -Icpp/src -Iice/cpp/src $(CPPFLAGS)
override LDFLAGS                += -pthread
LINKWITH                        = -Wl,-Bdynamic -lbz2 -ldl -lrt -lcrypto


mklib                           = $(AR) cr $(1) $(2)
mklibname                       = lib$(1).a

#
# Recursive wildcard function
#
rwildcard			= $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

#
# Relative path
#
relpath				= $(subst $(eval) ,/,$(patsubst %,..,$(subst /, ,$(subst $1,,$2))))

#
# Verbosity
#
ifdef V
    ifeq ("$(origin V)", "command line")
        BUILD_VERBOSE           = $(V)
    endif
endif

ifndef BUILD_VERBOSE
    BUILD_VERBOSE               = 0
endif

ifeq ($(BUILD_VERBOSE),0)
    Q                           = @
    E                           = @echo
else
    E                           = @:
endif

GITIGNORE_DEFAULT               = certs \
                                  scripts \
                                  lib \
                                  bin \
                                  .depend \
                                  debian \
                                  yocto \
                                  arm-linux-gnueabihf* \
                                  x86_64-linux-gnu* \
                                  arm-poky-linux-gnueabi* \
                                  *.so \
                                  *.so.* \
                                  *.a \
                                  *.pyc \
                                  *~ \
                                  cpp/**/run.py \
                                  python/python2.7/ \
                                  python/python3.4/

gitignore::
	@for line in $(GITIGNORE_DEFAULT) ; do \
	  echo $$line ; \
	done

%/run.py: ice/%/run.py
	$(E) "Copying test scripts"
	$(Q)cp $< $@

CLEAR_RULES                     = $(CURDIR)/config/Make.clear.rules
OBJECT_RULES                    = $(CURDIR)/config/Make.object.rules
LINK_RULES                      = $(CURDIR)/config/Make.link.rules
SUBMODULE_RULES                 = $(CURDIR)/config/Make.submodule.rules
APPLICATION_RULES               = $(CURDIR)/config/Make.application.rules
TEST_APPLICATION_RULES          = $(CURDIR)/config/Make.test.application.rules
TEST_STATICLIBRARY_RULES        = $(CURDIR)/config/Make.test.staticlibrary.rules
TEST_DYNAMICLIBRARY_RULES       = $(CURDIR)/config/Make.test.dynamiclibrary.rules
CLIENTSERVERTEST_RULES          = $(CURDIR)/config/Make.clientservertest.rules
LIBRARY_RULES                   = $(CURDIR)/config/Make.library.rules
STATICLIBRARY_RULES             = $(CURDIR)/config/Make.staticlibrary.rules
DYNAMICLIBRARY_RULES            = $(CURDIR)/config/Make.dynamiclibrary.rules
PYTHON_RULES                    = $(CURDIR)/config/Make.python.rules
RESOURCES_RULES                 = $(CURDIR)/config/Make.resources.rules
ICEE_PYTHON_RULES               = $(CURDIR)/config/Make.iceepython.rules
FREEZE_RULES                    = $(CURDIR)/config/Make.freeze.rules

#
# Install directories
#
ice_install_include_dir         ?= $(prefix)/include
ice_install_bin_dir             ?= $(prefix)/bin
ice_install_man_dir             ?= $(prefix)/share/man/man1
ifeq ($(prefix),$(base_prefix)/usr)
    ice_install_slice_dir       ?= $(prefix)/share/Ice-$(VERSION)/slice
else
    ice_install_slice_dir       ?= $(prefix)/slice
endif

CPP11_MODULES = IceUtil \
		Ice \
		IceSSL \
		Glacier2 \
		IceBox \
		IceGrid \
		IceStorm \
		IceDiscovery \
		IceLocatorDiscovery

ifneq ($(NOFREEZE),yes)
CPP11_MODULES := $(CPP11_MODULES) Freeze IceStormService
endif

ifeq ($(CPP11),yes)
DIST_MODULES = $(CPP11_MODULES)
DIST_TARGETS = icebox $(DIST_MODULES)
else
DIST_MODULES = IceUtil \
	       Ice \
	       IceSSL \
	       Glacier2 \
	       IceBox \
	       IceGrid \
	       IceStorm \
	       IceDiscovery \
	       IceLocatorDiscovery \
	       Slice \

DIST_TARGETS = slice2cpp \
	       slice2py \
	       glacier2router \
	       icebox \
	       iceboxadmin \
	       $(DIST_MODULES) \
	       IcePy

ifneq ($(NOFREEZE),yes)
DIST_MODULES := $(DIST_MODULES) Freeze IceStormService IceXML
DIST_TARGETS := $(sort $(DIST_TARGETS) slice2freeze icestormdb icestormadmin transformdb dumpdb $(DIST_MODULES))
endif

endif



#
# Include required .mk files
#
ifeq ($(USE_BIN_DIST),yes)

MAKEFRAGMENTS		= $(call rwildcard,cpp/test,*.mk) \
			  $(call rwildcard,python/test,*.mk)

else

dist:: $(DIST_TARGETS)

#
# If building a dist target only include dist targets.
#
ifeq ($(filter $(MAKECMDGOALS),install dist $(DIST_TARGETS)),)
MAKEFRAGMENTS 		= $(call rwildcard,,*.mk)
else
MAKEFRAGMENTS 		= $(call rwildcard,cpp/src,*.mk) \
			  $(call rwildcard,python,*.mk)
endif

endif

ifeq ($(NOFREEZE),yes)
SKIPFRAGMENTS		= cpp/src/Freeze/Makefile.mk \
			  cpp/src/FreezeScript/Makefile.mk \
			  cpp/src/slice2freeze/Makefile.mk \
			  cpp/src/IceXML/Makefile.mk \
			  cpp/test/Freeze/%/Makefile.mk \
			  cpp/test/IceStorm/%/Makefile.mk \

endif

MAKEFRAGMENTS		:= $(filter-out $(SKIPFRAGMENTS),$(MAKEFRAGMENTS))

include 		$(MAKEFRAGMENTS)

install:: $(INSTALL_TARGETS)
	$(E) "Installing IceE $(VERSION) to $(DESTDIR)$(prefix)"

all:: $(TARGETS)

clean:: $(CLEAN_TARGETS) test_clean

ifneq ($(USE_BIN_DIST),yes)
    test_deploy: $(filter $(DIST_TARGETS),glacier2router icebox iceboxadmin icestormadmin IcePy slice2py)
endif

.PHONY: test_deploy

DEPLOYDIR                       := $(shell mktemp -d)

test_deploy: test_compile
	mkdir -p $(DEPLOYDIR)
	mkdir -p $(subst $(prefix),$(DEPLOYDIR)/cpp,$(ice_install_lib_dir))
	mkdir -p $(DEPLOYDIR)/python/python
	mkdir -p $(DEPLOYDIR)/cpp/include/IceUtil
	rsync -aczv $(DEPLOYDIR)/* $(DEPLOY_TARGET)
	rm -rf $(DEPLOYDIR)

	rsync -aczv --prune-empty-dirs \
	        --exclude="*.d" \
	        --exclude="*.h" \
	        --exclude="*.cpp" \
	        --exclude="*.mk" \
	        --exclude="*.o" \
	        --exclude="ice" \
	        --exclude="lib" \
	        --exclude="scripts" \
	        --exclude="certs" \
	        --exclude=".git*" \
	        --exclude="Makefile" \
	        --exclude="README.md" \
	        --exclude="python" \
	        --exclude="mcpp" \
	        --exclude="*~" \
	        . $(DEPLOY_TARGET)

	# We need ice/cpp/include/IceUtil/Config.h for IceStorm tests
	rsync -aczv --prune-empty-dirs  ice/cpp/include/IceUtil/Config.h $(DEPLOY_TARGET)/cpp/include/IceUtil/Config.h
	rsync -aczv --prune-empty-dirs --exclude="*.pyc" ice/scripts $(DEPLOY_TARGET)
	rsync -aczv --prune-empty-dirs --exclude="*.pyc" ice/certs $(DEPLOY_TARGET)
ifneq ($(USE_BIN_DIST),yes)
	rsync -aczv --prune-empty-dirs --exclude="*.a" $(icee_lib_dir)/* $(subst $(prefix),$(DEPLOY_TARGET)/cpp,$(ice_install_lib_dir))
endif
	rsync -aczv python/allTests.py $(DEPLOY_TARGET)/python/
	rsync -aczv --prune-empty-dirs \
	        --exclude="*.pyc" \
	        --exclude="Make*" \
	        --exclude="*.d" \
	        --exclude="test/Slice/import/Test/*" \
	        --exclude="test/Slice/import/*_ice.py" \
	        ice/python/test $(DEPLOY_TARGET)/python/
ifneq ($(USE_BIN_DIST),yes)
	rsync -aczv --prune-empty-dirs --exclude="*.o" --exclude="*.d" python/$(PYTHON_DIR)/ $(DEPLOY_TARGET)/python/python
else
	# Necessary so that the tests can find the top level python directory
	rsync -aczv ice/python/python/Ice.py $(DEPLOY_TARGET)/python/python/
endif
	rsync -aczv --prune-empty-dirs --exclude="Make*" ice/slice $(DEPLOY_TARGET)/
	rsync -aczv --prune-empty-dirs --exclude="Make*" --exclude="*.d" python/test/* $(DEPLOY_TARGET)/python/test/

	rsync -av --filter="+ /*" --filter="+ /*/*" \
	        --filter="+ /*/*/db" \
	        --filter="+ /*/*/db2" \
	        --filter="+ /*/*/0.db" \
	        --filter="+ /*/*/0.db2" \
	        --filter="+ /*/*/1.db" \
	        --filter="+ /*/*/1.db2" \
	        --filter="+ /*/*/2.db" \
	        --filter="+ /*/*/2.db2" \
	        --exclude="*" cpp/test/ $(DEPLOY_TARGET)/cpp/test/

scripts: ice/scripts
	@rm -rf scripts
	ln -s ice/scripts scripts

certs: ice/certs
	@rm -rf certs
	ln -s ice/certs certs

all:: scripts certs

#
# Include depend rules
#
ifneq ($(MAKECMDGOALS),clean)
    include $(CURDIR)/config/Make.depend.rules
endif
