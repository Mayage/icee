# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************

.PHONY: all clean

all::
clean::

VERSION                         = 3.6.1
SOVERSION                       = 36

BUILD                           = $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifeq ($(USE_BIN_DIST),yes)
    ICE_HOME                    ?= /usr
    ICEE_HOME                   ?= /usr
endif

ice_slice_dir                   = ice/slice
ice_include_dir                 = ice/cpp/include
ice_man_dir                     = ice/man/man1

ifeq ($(ICE_HOME),)
    ice_bin_dir                 = ice/cpp/bin
    ice_lib_dir                 = ice/cpp/lib/$(BUILD)
else
    ice_bin_dir                 = $(ICE_HOME)/bin
    ice_lib_dir                 = $(ICE_HOME)/lib/$(BUILD)
endif

SLICE2CPP                       = $(ice_bin_dir)/slice2cpp
SLICE2CPPFLAGS                  = -I$(ice_slice_dir)
SLICE2PYFLAGS                   = -I$(ice_slice_dir)
override CPPFLAGS               += -I$(ice_include_dir)

ifeq ($(wildcard $(SLICE2CPP)),)
    $(error You need to build Ice for C++ from ice/cpp directory or set ICE_HOME to use an Ice binary distribution)
endif

#
# Optimization flags
#
ifeq ($(OPTIMIZE),yes)
    override CPPFLAGS           += -Os -DNDEBUG -ffunction-sections -fdata-sections
    LDFLAGS                     = -Wl,--gc-sections
else
    override CPPFLAGS           := $(CPPFLAGS) -g
endif

#
# If not using a system install set LD_LIBRARY_PATH to run slice2cpp compiler.
#
ifneq ($(ICE_HOME),/usr)
    export LD_LIBRARY_PATH := $(ice_libdir):$(LD_LIBRARY_PATH)
endif

#
# Include the OS specific rules
#
ifeq ($(filter $(ICEE_TARGET_OS),debian yocto),)
    $(error Invalid ICEE_TARGET_OS: '$(ICEE_TARGET_OS)' supported values are: 'debian' and 'yocto'))
endif

include config/Make.$(ICEE_TARGET_OS).rules

ifneq ($(USE_BIN_DIST),yes)
    icee_bin_dir                = cpp/bin
    icee_lib_dir                = cpp/lib/$(OBJPREFIX)
else
    ifneq ($(ICEE_HOME),/usr)
        icee_lib_dir            = $(ICEE_HOME)/lib/$(OBJPREFIX)
    endif
endif

override CPPFLAGS               := -Wall -Werror -pthread -Icpp/src -Iice/cpp/src $(CPPFLAGS)
LDFLAGS                         += -pthread
LINKWITH                        = -Wl,-Bdynamic -lbz2 -ldl -lrt -lcrypto


mklib                           = $(AR) cr $(1) $(2)
mklibname                       = lib$(1).a

#
# Recursive wildcard function
#
rwildcard                       = $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

#
# Verbosity
#
ifdef V
    ifeq ("$(origin V)", "command line")
        BUILD_VERBOSE           = $(V)
    endif
endif

ifndef BUILD_VERBOSE
    BUILD_VERBOSE               = 0
endif

ifeq ($(BUILD_VERBOSE),0)
    Q                           = @
    E                           = @echo
else
    E                           = @:
endif

GITIGNORE_DEFAULT               = certs \
                                  scripts \
                                  lib \
                                  bin \
                                  .depend \
                                  debian \
                                  yocto \
                                  arm-linux-gnueabihf \
                                  x86_64-linux-gnu \
                                  *.so \
                                  *.so.* \
                                  *~ \
                                  cpp/**/run.py

gitignore::
	@for line in $(GITIGNORE_DEFAULT) ; do \
	  echo $$line ; \
	done

%/run.py: ice/%/run.py
	$(E) "Copying test scripts"
	$(Q)cp $< $@

CLEAR_RULES                     = $(CURDIR)/config/Make.clear.rules
OBJECT_RULES                    = $(CURDIR)/config/Make.object.rules
LINK_RULES                      = $(CURDIR)/config/Make.link.rules
INSTALL_RULES                   = $(CURDIR)/config/Make.install.rules
SUBMODULE_RULES                 = $(CURDIR)/config/Make.submodule.rules
APPLICATION_RULES               = $(CURDIR)/config/Make.application.rules
TEST_APPLICATION_RULES          = $(CURDIR)/config/Make.test.application.rules
CLIENTSERVERTEST_RULES          = $(CURDIR)/config/Make.clientservertest.rules
LIBRARY_RULES                   = $(CURDIR)/config/Make.library.rules
STATICLIBRARY_RULES             = $(CURDIR)/config/Make.staticlibrary.rules
DYNAMICLIBRARY_RULES            = $(CURDIR)/config/Make.dynamiclibrary.rules
PYTHON_RULES                    = $(CURDIR)/config/Make.python.rules
ICEE_PYTHON_RULES               = $(CURDIR)/config/Make.iceepython.rules

#
# Install directories
#
ice_install_include_dir         = $(prefix)/include
ice_install_bin_dir             = $(prefix)/bin
ice_install_man_dir             = $(prefix)/share/man/man1
ifeq ($(prefix),/usr)
    ice_install_slice_dir       = $(prefix)/share/Ice-$(VERSION)/slice
else
    ice_install_slice_dir       = $(prefix)/slice
endif

#
# Include required .mk files
#
ifeq ($(USE_BIN_DIST),yes)

    include $(call rwildcard,cpp/test,*.mk)

install::

else
    DIST_TARGETS = slice2cpp \
                   slice2py \
                   glacier2router \
                   icebox \
                   iceboxadmin \
                   IceUtil \
                   Ice \
                   Glacier2 \
                   IceBox \
                   IceGrid \
                   IceStorm \
                   Slice \
                   IcePy
                   
    dist:: $(DIST_TARGETS)
    
    #
    # If building a dist target only include dist targets.
    #
    ifeq ($(filter $(MAKECMDGOALS),dist $(DIST_TARGETS)),)
        include $(call rwildcard,,*.mk)
    else
        include $(call rwildcard,cpp/src,*.mk)
        include $(call rwildcard,python,*.mk)
    endif

install:: dist
	$(E) "Installing IceE $(VERSION) to $(DESTDIR)$(prefix)"
	$(Q)mkdir -p $(DESTDIR)$(ice_install_lib_dir)
	$(Q)cp -rf $(icee_lib_dir)/*.a $(DESTDIR)/$(ice_install_lib_dir)
	$(Q)cp -rf $(icee_lib_dir)/*.so* $(DESTDIR)/$(ice_install_lib_dir)
	$(Q)mkdir -p $(DESTDIR)$(ice_install_bin_dir)
	$(Q)cp -rf $(icee_bin_dir)/slice2cpp $(DESTDIR)$(ice_install_bin_dir)
	$(Q)cp -rf $(icee_bin_dir)/slice2py $(DESTDIR)$(ice_install_bin_dir)
	$(Q)cp -rf $(icee_bin_dir)/glacier2router $(DESTDIR)$(ice_install_bin_dir)
	$(Q)cp -rf $(icee_bin_dir)/icebox $(DESTDIR)$(ice_install_bin_dir)
	$(Q)cp -rf $(icee_bin_dir)/iceboxadmin $(DESTDIR)$(ice_install_bin_dir)
	$(Q)mkdir -p $(DESTDIR)$(ice_install_man_dir)
	$(Q)cp -rf $(ice_man_dir)/slice2cpp.1 $(DESTDIR)$(ice_install_man_dir)
	$(Q)cp -rf $(ice_man_dir)/slice2py.1 $(DESTDIR)$(ice_install_man_dir)
	$(Q)cp -rf $(ice_man_dir)/glacier2router.1 $(DESTDIR)$(ice_install_man_dir)
	$(Q)cp -rf $(ice_man_dir)/icebox.1 $(DESTDIR)$(ice_install_man_dir)
	$(Q)cp -rf $(ice_man_dir)/iceboxadmin.1 $(DESTDIR)$(ice_install_man_dir)
	$(Q)mkdir -p $(DESTDIR)$(python_install_dir)
	$(Q)cp -rf python/python$(PYTHON_BASEVERSION)/*.py  $(DESTDIR)$(python_install_dir)/
	$(Q)cp -rf python/python$(PYTHON_BASEVERSION)/IcePy.so.$(VERSION)  $(DESTDIR)$(python_install_dir)/IcePy.so
	$(Q)cp -rf python/python$(PYTHON_BASEVERSION)/IceBox  $(DESTDIR)$(python_install_dir)/
	$(Q)cp -rf python/python$(PYTHON_BASEVERSION)/IceGrid  $(DESTDIR)$(python_install_dir)/
	$(Q)cp -rf python/python$(PYTHON_BASEVERSION)/IceStorm  $(DESTDIR)$(python_install_dir)/
	$(Q)cp -rf python/python$(PYTHON_BASEVERSION)/IceMX  $(DESTDIR)$(python_install_dir)/

endif

all:: $(TARGETS)

clean:: $(CLEAN_TARGETS)

test_deploy: test_compile test_resources
	rsync -aczv --prune-empty-dirs \
		--exclude="*.d" \
		--exclude="*.h" \
		--exclude="*.cpp" \
		--exclude="*.mk" \
		--exclude="*.o" \
		--exclude="ice" \
		--exclude="*.a" \
		--exclude="scripts" \
		--exclude="certs" \
		--exclude=".git*" \
		--exclude="Makefile" \
		--exclude="README.md" \
		. $(DEPLOY_TARGET)

	rsync -aczv --prune-empty-dirs --exclude="*.pyc" ice/scripts $(DEPLOY_TARGET)
	rsync -aczv --prune-empty-dirs --exclude="*.pyc" ice/certs $(DEPLOY_TARGET)

scripts: ice/scripts
	@rm -rf scripts
	ln -s ice/scripts scripts

certs: ice/certs
	@rm -rf certs
	ln -s ice/certs certs

all:: scripts certs

info::
	@echo "BUILD $(BUILD)"
	@echo "HOST $(HOST)"

#
# Include depend rules
#
ifneq ($(MAKECMDGOALS),clean)
    include $(CURDIR)/config/Make.depend.rules
endif
